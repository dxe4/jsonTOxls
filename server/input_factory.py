import datetime
from common import data_structures


class InputHandler(object):
    @staticmethod
    def init_formats(input, workbook):
        """
        Handles the cell formats if any. Json should have on the dictionary a formats key in order to create formats.
        If formats value doesnt exist return empty dict of formats, else add all formats in a dict.
        Structure:
            "formats" : {
                'number' : {'num_format':'$#,##.##'}
            }
        :param input: JSON input as given by client
        :param workbook: the workbook created by xlsx_factory
        :return: Empty dict if no formats are set on JSON, dict format_name : format if formats are specified
        """
        return_dict = {}
        for k, v in data_structures.pop_dict(input, "formats").items():
            return_dict[k] = workbook.add_format(v)
        return return_dict


    @staticmethod
    def get_args(value, formats):
        """
        Get the cell arguements.
        :param value: The value can be set up as 3 different types at the moment, either 'A1' : 'Item' or
             'A1':{'value':'Item','format':'bold'} or  '4,2':{'date':'2013-04-01','format':'date_format2'}
        :param formats: All possible formats as generated by InputHandler.init_formats
        :return: If only a value given the value is returned else the value of the cell is returned and a the specified
            format
        """

        def is_dict():
            key = "value" if "value" in value else "date"
            if "date" == key:
                nums = [int(n) for n in value[key].split("-")]
                date = datetime.date(nums[0], nums[1], nums[2])
                return date, formats[value['format']]
            else:
                return value['value'], formats[value['format']]

        def is_str():
            return (value,)

        functions = {dict: is_dict, str: is_str}
        return functions[value.__class__]()

    def parse_cell_position(k):
        """
        Parse the cell position. Allows you to add cells in format A1,B1 or 0,1 0,1
        :return: cell position as tuple examples: (A1) (0,1)
        """
        if "," in k:
            return tuple(int(n) for n in k.split(","))
        else:
            return (k,)


    # @staticmethod
    # def pop_dict(dictionary, key):
    #     """
    #     'Safe' pop from dictionary, prevents from throwing an exception when the key doesnt exist and returns none instead
    #     :param dictionary: dictionary to pop from
    #     :param key: key to find
    #     :return: returns the value of the given key or None if it doesnt exist in the dict
    #     """
    #     if key in dictionary:
    #         return dictionary.pop(key)
    #     else:
    #         return {}
    #
    # @staticmethod
    # def get_from_dict(dictionary,key):
    #     if key in dictionary:
    #         return dictionary[key]
    #     else:
    #         return None


